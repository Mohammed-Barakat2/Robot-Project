from roboticstoolbox import Bicycle, RandomPath, VehicleIcon, RangeBearingSensor,LandmarkMap
from math import pi, atan2
import matplotlib.pyplot as plt

#User inputs for starting robot position (x,y), number of randomly generated obsticles, and the goal position.
a1 = int(input('please provide the starting x-coordinate:'))
b1 = int(input('please provide the starting y-coordinate:')) 
d1 = int(input('please provide the number of obstacles:'))
a2 = int(input('please provide the target x-coordinate:'))
b2 = int(input('please provide the target y-coordinate:'))

#Function for robot to start moving towards the goal and stopping once it reaches it
def gettotarget():
 goal_heading = atan2(
 goal[1] - veh.x[1],
 goal[0] - veh.x[0]
 )
 steer = goal_heading-veh.x[2]
 veh.step(2,steer)
 if( (abs(goal[0]-veh.x[0]) > 0.3) or (abs(goal[1]-veh.x[1]) >
 0.3) ):
    run=True
 else:
    return False
 veh._animation.update(veh.x)
 plt.pause(0.0005)

#Function for robot to avoid randomly placed obstacles
def avoidobstacles(readings):
    for i in readings:
        if i[0]<1.5: 
            veh.x[2]+=2


anim = VehicleIcon('Robot.png', scale = 3)
veh = Bicycle(
 animation=anim,
 control=RandomPath,
 x0=(a1,b1,0),
)
veh.init(plot=True)

#Randomly placed obsticles on a 20 by 20 grid
map = LandmarkMap(d1,20)
map.plot()

#Goal code
goal=[a2,b2]; 
goal_marker_style = {
 'marker': 'D',
 'markersize': 6,
 'color': 'b',
}
plt.plot(goal[0], goal[1], **goal_marker_style)

#Range Sensor that provides distance and angle of random obstacles
sensor=RangeBearingSensor(robot=veh, map= map ,animate=True)

#While loop to make the robot move towards the goal and avoid obstacles
run =True
while(run): 
    if(gettotarget()) is False :
        run = False
    avoidobstacles(sensor.h(veh.x))
    


plt.pause(1000)
